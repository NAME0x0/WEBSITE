#!/usr/bin/env node

"use strict";

require("../tools/exit.cjs");

try {
    require("source-map-support").install();
} catch (err) {}

const fs = require("fs");
const path = require("path");
const program = require("commander");
const terser = require("terser");

const packageJson = require("../package.json");
const { _run_cli: run_cli } = require("..");

// Add minification logic
async function minifyFile(inputPath, outputPath) {
    try {
        const inputCode = fs.readFileSync(inputPath, "utf8");
        const result = await terser.minify(inputCode);

        if (result.error) {
            console.error("Error during minification:", result.error);
            process.exitCode = 1;
            return;
        }

        fs.writeFileSync(outputPath, result.code);
        console.log(`Minification successful! Output written to ${outputPath}`);
    } catch (error) {
        console.error("Minification failed:", error);
        process.exitCode = 1;
    }
}

// Integrate minification with CLI logic
program
    .version(packageJson.version)
    .description("CLI tool with minification support")
    .option("-i, --input <file>", "Input file for minification")
    .option("-o, --output <file>", "Output file for minification")
    .action(async (options) => {
        if (options.input && options.output) {
            console.log(`Minifying ${options.input} to ${options.output}...`);
            await minifyFile(options.input, options.output);
        } else {
            console.error("Please specify both input and output files for minification.");
        }
    });

run_cli({ program, packageJson, fs, path }).catch((error) => {
    console.error(error);
    process.exitCode = 1;
});
