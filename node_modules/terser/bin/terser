#!/usr/bin/env node

"use strict";

const fs = require("fs");
const path = require("path");
const { execSync } = require("child_process");

// Input and output directories
const srcDir = path.resolve("src/scripts");
const distDir = path.resolve("dist/scripts");

// Function to ensure directories exist
function ensureDirectoryExists(dir) {
  if (!fs.existsSync(dir)) {
    fs.mkdirSync(dir, { recursive: true });
  }
}

// Function to recursively process files
function processFiles(inputDir, outputDir) {
  const files = fs.readdirSync(inputDir);

  files.forEach((file) => {
    const inputFilePath = path.join(inputDir, file);
    const outputFilePath = path.join(outputDir, file);

    if (fs.statSync(inputFilePath).isDirectory()) {
      // If the item is a directory, recursively process it
      ensureDirectoryExists(outputFilePath);
      processFiles(inputFilePath, outputFilePath);
    } else if (file.endsWith(".js")) {
      // If the item is a JavaScript file, minify it
      ensureDirectoryExists(path.dirname(outputFilePath));
      console.log(`Minifying: ${inputFilePath} -> ${outputFilePath}`);
      execSync(`terser ${inputFilePath} -o ${outputFilePath} --compress --mangle`);
    }
  });
}

// Ensure output directory exists
ensureDirectoryExists(distDir);

// Process files
processFiles(srcDir, distDir);
